import logging
import re
from telegram import (
    Update, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
TOKEN = "8427995643:AAEPWeLmIERHxOQobvtnhNIvYzClqw7-oSE"
ADMIN_ID = 5643226867
CHAT_ID = -1002465516886
PRICE = 20000

# --- –õ–æ–≥ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
WAITING_STEP = {}
TEMP_DATA = {}
BOOKINGS = {
    "–ö–∞–±–∏–Ω–∞ - 1": [],
    "–ö–∞–±–∏–Ω–∞ - 2": [],
    "–ö–∞–±–∏–Ω–∞ - 3": [],
    "–ì–æ–ª–¥ –∫–∞–±–∏–Ω–∞ - 1": [],
    "–ì–æ–ª–¥ –∫–∞–±–∏–Ω–∞ - 2": []
}

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–ö–∞–±–∏–Ω–∞ - 1", "–ö–∞–±–∏–Ω–∞ - 2", "–ö–∞–±–∏–Ω–∞ - 3"],
        ["–ì–æ–ª–¥ –∫–∞–±–∏–Ω–∞ - 1", "–ì–æ–ª–¥ –∫–∞–±–∏–Ω–∞ - 2"]
    ]
    await update.message.reply_text(
        f"–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, {update.effective_user.first_name}!\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ª–æ–≥–∞: {PRICE} —Å—É–º.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    WAITING_STEP[update.effective_user.id] = "choose_cabin"

# --- –í—ã–±–æ—Ä –∫–∞–±–∏–Ω—ã ---
async def choose_cabin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cabin = update.message.text
    if cabin not in BOOKINGS:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    TEMP_DATA[update.effective_user.id] = {"cabin": cabin}
    WAITING_STEP[update.effective_user.id] = "phone"

    booked_times = BOOKINGS[cabin]
    if booked_times:
        busy_list = "\n".join([f"{t[0]} - {t[1]}" for t in booked_times])
        await update.message.reply_text(f"‚è∞ –ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è {cabin}:\n{busy_list}")
    else:
        await update.message.reply_text(f"‚úÖ –í—Å–µ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ –¥–ª—è {cabin}")

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998 XX XXX XX XX –∏–ª–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    phone_clean = phone.replace(" ", "")

    if not re.fullmatch(r"\+998\d{9}", phone_clean):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998 XX XXX XX XX")
        return

    formatted_phone = f"{phone_clean[:4]} {phone_clean[4:6]} {phone_clean[6:9]} {phone_clean[9:11]} {phone_clean[11:]}"
    TEMP_DATA[update.effective_user.id]["phone"] = formatted_phone
    WAITING_STEP[update.effective_user.id] = "time"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17:00 - 18:00, 17 - 18, –∏–ª–∏ 17 18)")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
def time_overlap(start1, end1, start2, end2):
    return not (end1 <= start2 or start1 >= end2)

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_input = update.message.text.strip()

    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    patterns = [
        r"^(\d{2}):(\d{2})\s*-\s*(\d{2}):(\d{2})$",
        r"^(\d{2})\s*-\s*(\d{2})$",
        r"^(\d{2})\s+(\d{2})$"
    ]

    match = None
    for p in patterns:
        match = re.match(p, time_input)
        if match:
            break

    if not match:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM - HH:MM, HH - HH –∏–ª–∏ HH HH")
        return

    if len(match.groups()) == 4:
        start = f"{match.group(1)}:{match.group(2)}"
        end = f"{match.group(3)}:{match.group(4)}"
    elif len(match.groups()) == 2:
        start = f"{match.group(1)}:00"
        end = f"{match.group(2)}:00"
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        return

    cabin = TEMP_DATA[update.effective_user.id]["cabin"]
    for booked_start, booked_end in BOOKINGS[cabin]:
        if time_overlap(start, end, booked_start, booked_end):
            busy_list = "\n".join([f"{t[0]} - {t[1]}" for t in BOOKINGS[cabin]])
            await update.message.reply_text(f"‚ùå –≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ.\n‚è∞ –ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:\n{busy_list}")
            return

    TEMP_DATA[update.effective_user.id]["time"] = (start, end)
    WAITING_STEP[update.effective_user.id] = "screenshot"
    await update.message.reply_text(f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {PRICE} —Å—É–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. 5614 6816 2063 9082")

# --- –ü—Ä–∏—ë–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if WAITING_STEP.get(update.effective_user.id) != "screenshot":
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ /start")
        return

    data = TEMP_DATA[update.effective_user.id]
    photo_id = update.message.photo[-1].file_id

    caption = (
        f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name} (@{update.effective_user.username or '–Ω–µ—Ç'})\n"
        f"üè† –ö–∞–±–∏–Ω–∞: {data['cabin']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time'][0]} - {data['time'][1]}\n"
        f"üí∞ –ó–∞–ª–æ–≥: {PRICE} —Å—É–º"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{update.effective_user.id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{update.effective_user.id}")]
    ])

    await context.bot.send_photo(chat_id=ADMIN_ID, photo=photo_id, caption=caption, reply_markup=keyboard)
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, user_id = query.data.split("_")
    user_id = int(user_id)

    if query.from_user.id != ADMIN_ID:
        await query.edit_message_caption(caption="‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.")
        return

    if action == "confirm":
        data = TEMP_DATA[user_id]
        BOOKINGS[data["cabin"]].append(data["time"])

        await context.bot.send_message(
            chat_id=CHAT_ID,
            text=(
                f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"üè† –ö–∞–±–∏–Ω–∞: {data['cabin']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {data['time'][0]} - {data['time'][1]}"
            )
        )

        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüè† {data['cabin']}\n‚è∞ {data['time'][0]} - {data['time'][1]}"
        )

        await query.edit_message_caption(caption="‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    elif action == "reject":
        WAITING_STEP[ADMIN_ID] = f"reject_reason_{user_id}"
        await context.bot.send_message(chat_id=ADMIN_ID, text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")

# --- –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è ---
async def reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = WAITING_STEP.get(ADMIN_ID, "")
    if step.startswith("reject_reason_") and update.effective_user.id == ADMIN_ID:
        user_id = int(step.split("_")[2])
        await context.bot.send_message(chat_id=user_id, text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {update.message.text}")
        await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        WAITING_STEP.pop(ADMIN_ID, None)

# --- –†–æ—É—Ç–∏–Ω–≥ ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = WAITING_STEP.get(update.effective_user.id)
    if step == "choose_cabin":
        await choose_cabin(update, context)
    elif step == "phone":
        await get_phone(update, context)
    elif step == "time":
        await get_time(update, context)
    elif isinstance(step, str) and step.startswith("reject_reason_") and update.effective_user.id == ADMIN_ID:
        await reject_reason(update, context)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
